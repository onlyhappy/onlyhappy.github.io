<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ithappy.cn/"/>
  <updated>2017-10-07T13:27:45.612Z</updated>
  <id>http://ithappy.cn/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>1.浅谈Vue.js</title>
    <link href="http://ithappy.cn/2017/09/25/1-%E6%B5%85%E8%B0%88Vue-js/"/>
    <id>http://ithappy.cn/2017/09/25/1-浅谈Vue-js/</id>
    <published>2017-09-24T16:07:28.000Z</published>
    <updated>2017-10-07T13:27:45.612Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈Vue-js-一"><a href="#浅谈Vue-js-一" class="headerlink" title="浅谈Vue.js (一)"></a>浅谈Vue.js (一)</h1><blockquote><p>前言</p></blockquote><p>随着前端开发趋势，旧浏览器逐渐淘汰，移动端用户需求增加，以及前后端的分离，前端的交互越来越多，功能越来越复杂，架构从传统后台mvc到向REST API+ 前端MV*迁移，前端的技术栈包罗万象、涉及极广，现代化产品交互多，技术复杂，而一个良好的产品能给用户带来良好的体验，以及前端框架的流行，能够很好的满足PC端和移动端的开发需求。目前为止比较流行的MVVM框架有AngularJS、ReactJs、和VueJS，接下来我会用文章一步一步详解Vue，加深理解对作者的思想和对知识的认知的记录。</p><h2 id="1-1-简介"><a href="#1-1-简介" class="headerlink" title="1.1 简介"></a>1.1 简介</h2><p>Vue.js的作者为：Evan You（尤雨溪），起初是一个个人项目，但随着Vue生态圈的蓬勃发展（vue-router，vue-resource）等丰富的第三方插件，Vue已经是轻量级的MVVM框架了。</p><p>Vue的核心思想是数据驱动+组件化开发，参考了React的部分设计，当然也有自己的独特的单文件组件化开发方式，另外一些绑定的语法，用法等都非常精炼，很容易上手，而且Vue第三方插件非常丰富，社区活跃，更有详细的中文文档，可以很好的上手、学习。而且Vue配合官方和第三方的库可以实现单文件的组件化开发SPA等流行前端开发。</p><p>Vue学习详情请参考官网： <a href="https://cn.vuejs.org/" target="_blank" rel="external">Vue.js</a></p><p>相信大家觉得Vue和Angular语法比较相识，他们都有双向数据绑定的特征，Angular的学习曲线是比较陡峭，可以说颠覆了前端的开发方式，它的设计目标就是针对大型的复杂应用。与之相比，Vue更加轻量级，像官网上介绍的那样， 简洁、轻量、快速、数据驱动、模块友好、组件化。下面简单介绍Vue的几个特征。</p><h2 id="1-2-简洁的语法和双向数据绑定"><a href="#1-2-简洁的语法和双向数据绑定" class="headerlink" title="1.2 简洁的语法和双向数据绑定"></a>1.2 简洁的语法和双向数据绑定</h2><p>Vue代码编写风格更加简洁、通俗易懂。双向数据绑定使数据的变化自动映射到HTML上。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot;&gt;</div><div class="line">&lt;head&gt;</div><div class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</div><div class="line">  &lt;title&gt;Hello Vue！&lt;/title&gt;</div><div class="line">  &lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">  &lt;div id=&quot;app&quot;&gt;</div><div class="line">    &lt;!--Vue模板的绑定数据的方法，用双花括号绑定Vue中的数据对象的属性 --&gt;</div><div class="line">    &#123;&#123; msg &#125;&#125;</div><div class="line">  &lt;/div&gt;</div><div class="line"></div><div class="line">  &lt;script&gt;</div><div class="line">    var app = new Vue(&#123;     // 创建Vue的核心对象</div><div class="line">      el: &apos;#app&apos;,           // el属性：把当前Vue对象挂载到 div标签上，#app是id选择器</div><div class="line">      data: &#123;               // data: 是Vue对象中绑定的数据</div><div class="line">        msg: &apos;Hello Vue!&apos;   // msg 自定义的数据</div><div class="line">      &#125;</div><div class="line">    &#125;);</div><div class="line">  &lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><blockquote><p>结果： Hello Vue！</p></blockquote><h2 id="1-3-指令"><a href="#1-3-指令" class="headerlink" title="1.3 指令"></a>1.3 指令</h2><p>指令: 扩展html标签功能,属性</p><ul><li>v-model=”msg”  一般表单元素(input)  双向数据绑定</li><li>v-on:click=”函数”  单击事件</li><li>v-show=”true/false”  显示/隐藏</li><li>v-bind:src=”url”   绑定动态属性</li></ul><h2 id="1-4-路由"><a href="#1-4-路由" class="headerlink" title="1.4 路由"></a>1.4 路由</h2><p>让开发更加方便，可以在当前页面切换不同的组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//配置路由</div><div class="line"> const routes=[</div><div class="line">   &#123;path:&apos;/home&apos;, component:Home&#125;,</div><div class="line">   &#123;path:&apos;/user&apos;, component:User&#125;</div><div class="line"> ];</div><div class="line"> //生成路由实例</div><div class="line"> const router=new VueRouter(&#123;</div><div class="line">   routes</div><div class="line"> &#125;);</div><div class="line"> //最后挂到vue上</div><div class="line"> new Vue(&#123;</div><div class="line">   router,</div><div class="line">   el:&apos;#box&apos;</div><div class="line"> &#125;);</div></pre></td></tr></table></figure><h2 id="1-5-组件"><a href="#1-5-组件" class="headerlink" title="1.5 组件"></a>1.5 组件</h2><p>组件可以扩展HTML元素，封装可重用的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// html</div><div class="line">    &lt;template id=&quot;aaa&quot;&gt;</div><div class="line">        &lt;div&gt;</div><div class="line">            &lt;h3&gt;我是组件&lt;/h3&gt;</div><div class="line">            &lt;h3&gt;我也是组件&lt;/h3&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;/template&gt;</div><div class="line">    &lt;div id=&quot;box&quot;&gt;</div><div class="line">        &lt;aaa&gt;&lt;/aaa&gt;</div><div class="line">        &#123;&#123;msg&#125;&#125;</div><div class="line">    &lt;/div&gt;</div><div class="line">    </div><div class="line">// js</div><div class="line">    &lt;script&gt;</div><div class="line">        var Home=&#123;  //这是2.0组件</div><div class="line">            template:&apos;#aaa&apos;</div><div class="line">        &#125;;</div><div class="line">        </div><div class="line">        new Vue(&#123;</div><div class="line">          el:&apos;#box&apos;,</div><div class="line">          data:&#123;</div><div class="line">            msg:&apos;hello vue2.0组件&apos;</div><div class="line">          &#125;,</div><div class="line">          components:&#123;</div><div class="line">           &apos;aaa&apos;:Home</div><div class="line">          &#125;</div><div class="line">        &#125;);   </div><div class="line">  </div><div class="line">    &lt;/script&gt;</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">结果如下：</div><div class="line"></div><div class="line">我是组件</div><div class="line">我也是组件</div><div class="line">hello vue2.0组件</div></pre></td></tr></table></figure><h2 id="1-6-总结"><a href="#1-6-总结" class="headerlink" title="1.6 总结"></a>1.6 总结</h2><p>面对技术的选型，技术的社区非常重要，接下来Vue对比Angular和React：<br>Vue.js更加轻量，gzip后大小只有20k+,相比其他框架更加轻量，Vue.js更加适合做移动端项目。<br>学过Angularjs的同学更能体会到Vue.js容易上手，学习曲线的平稳，它借鉴了Angularjs的指令和Reactjs的组件化，Vue的计算属性也非常好用。面对移动端的需求增加，Vue.js发展趋势越来越好，相信大家会喜欢上Vue.js！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浅谈Vue-js-一&quot;&gt;&lt;a href=&quot;#浅谈Vue-js-一&quot; class=&quot;headerlink&quot; title=&quot;浅谈Vue.js (一)&quot;&gt;&lt;/a&gt;浅谈Vue.js (一)&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/blockquote&gt;

      
    
    </summary>
    
    
      <category term="Vue.js" scheme="http://ithappy.cn/tags/Vue-js/"/>
    
  </entry>
  
</feed>
